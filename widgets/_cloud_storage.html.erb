<% api_base_url = "/pun/sys/ood-cloud-storage-conf" %>
<% lumio_api_base_url = "/lumio" %>
<%= render :layout => 'widgets/container', :locals => {:title => "Cloud storage configuration" } do %>
  <div id="alerts-container"></div>
  <div id="remotes_container" class="mb-3">
    <span class="font-weight-bold">Currently configured remotes:</span>
    <table id="remotes_table" class="table table-striped mb-1">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Type</th>
          <th scope="col">Expiry</th>
          <th scope="col">Action</th>
        </tr>
      </thead>
      <tbody>
      </tbody>
    </table>
    <p id="remotes_table_empty" class="d-none">No remotes have been configured.</p>
    <div id="remotes_table_loading_spinner" class="text-center mt-3">
      <div class="spinner-border clearfix">
        <span class="sr-only">Loading...</span>
      </div>
      <p>Loading remotes...</p>
    </div>
    <p>The table above lists the currently configured remotes in the Rclone config.</p>
    <p>Deleting a remote only removes the configured Rclone remote, while keeping the remote's access token valid as it may be used outside of the web interface. To revoke the access token too, you can use the revoke button for the remote, which will revoke the access token if possible and delete the remote.</p>
  </div>
  <div id="add_remote_container" class="d-none">
    <p>
    New Rclone remotes for can be created below. After configuring a remote, you will be able to access it in the Files dropdown in the navigation menu.
    When transferring files in the file browser, keep the browser tab with the transfer open to ensure that it completes successfully.
    For more details on using the file browser, check the <a href="https://docs.lumi-supercomputer.eu/runjobs/webui/#files">LUMI user guide</a>.
    </p>
    <span class="font-weight-bold">Configure new remotes:</span>
    <ul class="nav nav-tabs" id="form_tabs" role="tablist">
      <li class="nav-item allas d-none">
        <a class="nav-link" id="nav_btn_allas_s3" data-toggle="tab" data-target="#tab_allas_s3" href="#" role="tab" aria-controls="tab_allas_s3" aria-selected="true">Allas S3</a>
      </li>
      <li class="nav-item allas d-none">
        <a class="nav-link" id="nav_btn_allas_swift" data-toggle="tab" data-target="#tab_allas_swift" href="#" role="tab" aria-controls="tab_allas_swift" aria-selected="false">Allas Swift</a>
      </li>
      <li class="nav-item lumio d-none">
        <a class="nav-link" id="nav_btn_lumio" data-toggle="tab" data-target="#tab_lumio" href="#" role="tab" aria-controls="tab_lumio" aria-selected="false">LUMI-O</a>
      </li>
    </ul>
    <div class="tab-content" id="form_tab_content">
      <div class="tab-pane allas d-none" id="tab_allas_s3" role="tabpanel" aria-labelledby="nav_btn_allas_s3">
        <div class="allas-auth-container mt-2 d-none">
          <span class="font-weight-bold">Authentication using the password of your CSC account is required to generate or revoke Allas access tokens:</span>
          <%= bootstrap_form_tag url: "#{api_base_url}/renew_token", remote: true, html: { class: "renew-allas-token-form" } do |f| %>
            <%= f.password_field :password %>
            <%= f.primary "Submit" %>
          <% end %>
        </div>
        <div class="allas-form d-none">
          <p class="mt-2">If an S3 access token already exists for the project, it will be reused for the remote. Otherwise, a new S3 access token will be generated. The S3 access tokens are valid forever. You can find documentation about the difference between Swift and S3 <a href="https://docs.csc.fi/data/Allas/introduction/#protocols">here</a>.</p>
          <p>Check the <a href="https://docs.csc.fi/data/Allas/">CSC user guides</a> for more details about using Allas.</p>
          <%= bootstrap_form_tag :url => "#{api_base_url}/add", :remote => true, :html => { :id => "add_s3_remote", :class => "add-remote-form" } do |f| %>
            <%= f.select :project, [], { :label => "Project" }, :class => ["project_select", "allas"], :id => nil %>
            <%= f.hidden_field :remote_type, :value => :s3, :id => nil  %>
            <%= f.primary "Submit", :class => "btn btn-primary mt-2" %>
          <% end %>
        </div>
        <div class="allas-loading-spinner text-center mt-5">
          <div class="spinner-border clearfix">
            <span class="sr-only">Loading...</span>
          </div>
          <p>Checking available projects...</p>
        </div>
      </div>
      <div class="tab-pane allas d-none" id="tab_allas_swift" role="tabpanel" aria-labelledby="nav_btn_allas_swift">
        <div class="allas-auth-container mt-2 d-none">
          <span class="font-weight-bold">Authentication using the password of your CSC account is required to generate or revoke Allas access tokens:</span>
          <%= bootstrap_form_tag url: "#{api_base_url}/renew_token", remote: true, html: { class: "renew-allas-token-form" } do |f| %>
            <%= f.password_field :password %>
            <%= f.primary "Submit" %>
          <% end %>
        </div>
        <div class="allas-form d-none">
          <p class="mt-2">A new Swift access token will be generated for each new remote. The new token will be valid until <span class="allas_token_expiry"></span>. You can find documentation about the difference between Swift and S3 <a href="https://docs.csc.fi/data/Allas/introduction/#protocols">here</a>.</p>
          <p>Check the <a href="https://docs.csc.fi/data/Allas/">CSC user guides</a> for more details about using Allas.</p>
          <%= bootstrap_form_tag :url => "#{api_base_url}/add", :remote => true, :html => { :id => "add_swift_remote", :class => "add-remote-form" } do |f| %>
            <%= f.select :project, [], { :label => "Project" }, :class => ["project_select", "allas"], :id => nil %>
            <%= f.hidden_field :remote_type, :value => :swift, :id => nil  %>
            <%= f.primary "Submit", :class => "btn btn-primary mt-2" %>
            <button class="btn btn-primary mt-2 btn-add-all" data-endpoint="allas_swift">Add Swift remotes for all projects</button>
          <% end %>
        </div>
        <div class="allas-loading-spinner text-center mt-5">
          <div class="spinner-border clearfix">
            <span class="sr-only">Loading...</span>
          </div>
          <p>Checking available projects...</p>
        </div>
      </div>
      <div class="tab-pane lumio d-none" id="tab_lumio" role="tabpanel" aria-labelledby="nav_btn_lumio">
        <p class="mt-2">If an S3 access token for the web interface already exists for the project, it will be reused for the remote. Otherwise, a new S3 access token will be generated. The S3 access tokens will be valid for 7 days.</p>
        <p>Check the <a href="https://docs.lumi-supercomputer.eu/storage/lumio/">LUMI user guide</a> for more details about LUMI-O.</p>
        <%= bootstrap_form_tag :url => "#{lumio_api_base_url}/add", :remote => true, :html => { :id => "add_lumio_remote", :class => "add-remote-form" } do |f| %>
          <%= f.select :project, [["Loading projects...", ""]], { :label => "Project" }, :class => ["project_select", "lumio"], :id => nil %>
          <%= f.check_box :s3cmd do %>
            Generate s3cmd configuration
            <i class="fa fa-question-circle" title="Generate configuration for use with s3cmd. Configuration will be placed in ~/.s3cmd-lumi-<project>."></i>
          <% end %>
          <%= f.check_box :public do %>
            Configure public remote
            <i class="fa fa-question-circle" title="Configure a lumi-<project>-public remote. Files uploaded will be publicly accessibly on the URL https://<project_number>.lumidata.eu/<bucket_name>."></i>
          <% end %>
          <br>
          <%= f.hidden_field :remote_type, :value => :lumio, :id => nil  %>
          <%= f.primary "Submit", :class => "btn btn-primary mt-2" %>
          <button class="btn btn-primary mt-2 btn-add-all" data-endpoint="lumio">Add remotes for all projects</button>
        <% end %>
      </div>
    </div>
  </div>
<% end %>

<script>
  const API_BASE_URL = "<%= api_base_url -%>";
  const LUMIO_API_BASE_URL = "<%= lumio_api_base_url -%>";

  function addAlert(title, content, type = "info", extra_message_title = null, extra_messages = []) {
    const extra_content = extra_messages.map(msg => $("<p></p>", {class: "mb-0"}).text(msg));
    const alertHtml = `
<div class="alert alert-${type} alert-dismissible" role="alert">
  <button type="button" class="close" data-dismiss="alert" aria-label="Close">
    <span aria-hidden="true">Ã—</span>
  </button>
  <h4>${title}</h4>
  <p class="alert-content"></p>
  <details>
    <summary></summary>
    <div class="extra-content">
    </div>
  </details>
</div>
    `;
    const jqAlert = $(alertHtml);
    jqAlert.find(".alert-content").text(content);
    jqAlert.find(".extra-content").append(...extra_content);
    jqAlert.find("details").toggleClass("d-none", !(extra_message_title && extra_messages.length));
    jqAlert.find("details summary").text(extra_message_title);
    $("#alerts-container").empty();
    $("#alerts-container").append(jqAlert);
  }

  function addError(desc, err, log = true) {
    if (log) {
      console.error(desc, err.message || "");
    }
    addAlert("Error", desc, "danger", "Details:", [err.msg, ...err.errors]);
  }

  class APIError extends Error {
    constructor(message, errors = [], response = null, data = {}) {
      super(`${message}\n${errors.join("\n")}`);
      this.msg = message;
      this.errors = errors;
      this.response = response;
      this.data = data;
    }
  }

  class AuthorizationError extends APIError {
    constructor(message, errors = [], response = null, data = {}) {
      super(message, errors, response, data);
    }
  }

  function parse_api_error(text, res) {
    try {
      const err = JSON.parse(text)
      if ((!res || res.status == 401) && (err.message === "Expired access token" || err.message === "Authorization error")) {
        return new AuthorizationError(err.message, err.errors, res);
      } else {
        return new APIError(err.message, err.errors, res, {added: err.added, removed: err.removed, backup: err.backup});
      }
    } catch (e) {
      return new APIError(text, [], res);
    }
  }

  async function parse_response(res, json, lumio = false) {
    if (res.ok) {
      return await (json ? res.json() : res.text());
    } else {
      const text = await res.text();
      throw parse_api_error(text, res);
    }
  }

  async function api_get({url, json = true, lumio = false, attempt_reauth = false}) {
    const API_URL = lumio ? LUMIO_API_BASE_URL : API_BASE_URL;
    const res = await fetch(`${API_URL}${url}`);
    try {
      return await parse_response(res, json);
    } catch (e) {
      if (e instanceof AuthorizationError && lumio && attempt_reauth) {
        await refresh_lumio_access_token();
        return await api_get({ url, json, lumio, attempt_reauth: false });
      } else {
        throw e;
      }
    }
  }

  async function api_post({url, formData = {}, json = true, lumio = false, attempt_reauth = false}) {
    const body = new FormData();
    for (const [key, value] of Object.entries(formData)) {
      body.append(key, value);
    }
    const API_URL = lumio ? LUMIO_API_BASE_URL : API_BASE_URL;
    const res = await fetch(`${API_URL}${url}`, { body, method: "post" });
    try {
      return await parse_response(res, json);
    } catch (e) {
      if (e instanceof AuthorizationError && lumio && attempt_reauth) {
        await refresh_lumio_access_token();
        return await api_post({ url, formData, json, lumio, attempt_reauth: false });
      } else {
        throw e;
      }
    }
  }

  // Formats the expiry Unix timestamp to a human readable format
  function format_expiry(timestamp) {
    if (typeof timestamp === "number") {
      const dt = new Date(timestamp*1000);
      const y = dt.getFullYear();
      const m = dt.getMonth()+1;
      const d = dt.getDate();
      const time = dt.toLocaleTimeString("default", { hour: "numeric", minute: "numeric", second: "numeric", hour12: false, timeZoneName: "short"});
      return `${y}-${m}-${d} ${time}`;
    }
    return timestamp;
  }

  // Updates the project dropdowns for either forms of type allas or lumio
  function set_projects(projects, type) {
    const project_selects = $(`.project_select${type != null ? `.${type}` : "" }`);
    project_selects.empty();
    const options = projects.map((proj) => {
      const option = document.createElement("option");
      $(option).attr("value", proj.Name).text(proj.Name);
      return option
    });
    project_selects.append(...options);
  }

  // Fixes tab visibilites.
  // Sets first tab to be visible, hides the whole container if no tab is visible (no Allas or LUMI-O access)
  function update_tabs() {
    const tab_panes = $("#add_remote_container .tab-pane:not(.d-none)");
    const tab_buttons = $("#add_remote_container .nav-item:not(.d-none) > .nav-link");

    const already_has_active = tab_buttons.filter(".active").length && tab_panes.filter(".active").length;
    if (tab_buttons.length && tab_panes.length) {
      if (!already_has_active) {
        tab_buttons.removeClass("active");
        tab_panes.removeClass("active");
        tab_buttons.first().addClass("active");
        tab_panes.first().addClass("active");
      }
      $("#add_remote_container").removeClass("d-none");
    } else {
      $("#add_remote_container").addClass("d-none");
    }
  }

  // Toggle the visibility of LUMI-O elements (tabs)
  function toggle_lumio(access) {
    $(".lumio").toggleClass("d-none", !access);
  }

  // Toggles the visibility of Allas forms and tabs, based on access and auth state
  function toggle_allas(access, auth) {
    const unknown_auth = auth === undefined;
    $(".allas-loading-spinner").toggleClass("d-none", !unknown_auth);
    $(".allas-auth-container").toggleClass("d-none", unknown_auth || access && auth);
    $(".allas-form").toggleClass("d-none", unknown_auth || !(access && auth));
    $(".allas").toggleClass("d-none", !access);
  }

  // Checks if user has access to Allas
  function has_allas_access() {
    return api_get({ url: "/allas_access", json: true, lumio: true })
      .then(res => res["has_access"])
      .catch(err => {
        console.error("Error checking access to Allas:", err);
        return false;
      });
  }

  // Checks if user has access to LUMI
  function has_lumi_access() {
    return api_get({ url: "/lumi_access", json: true, lumio: true })
      .then(res => res["has_access"])
      .catch(err => {
        console.error("Error checking access to LUMI:", err);
        return false;
      });
  }

  async function refresh_lumio_access_token() {
    const url = `${LUMIO_API_BASE_URL}/refresh?redir=${LUMIO_API_BASE_URL}/lumi_access`;
    const res = await fetch(url, { redirect: "follow" });
    const redir_url = new URL(res.url)
    const error_code = (new URL(res.url)).searchParams.get("error_code");
    if (error_code || !res.ok) {
      throw new APIError(`Refresh of OIDC access token failed: ${error_code || "Unknown error"}. Please try logging out and in again.`);
    }
  }

  // Returns Allas auth status and list of projects (empty if no auth)
  function get_allas_auth_and_projects() {
    return api_get({ url: "/projects", json: true })
      .then(projects => {return { auth: true, projects }})
      .catch(err => {
        if (!(err.response && err.response.status === 401)) {
          addError("An error occurred when updating the list of Allas projects.", err);
        }
        return { auth: false, projects: []};
      });
  }

  // Updates the current Allas projects list and UI state
  async function update_allas_projects() {
    const access = await has_allas_access();
    const { auth, projects } = access ? (await get_allas_auth_and_projects()) : { auth: false, projects: [] };
    set_projects(projects, "allas");
    toggle_allas(access, auth);
    if (access && auth) {
      await update_expiry();
    }
    update_revoke_buttons();
  }

  // Check if user has authenticated to Allas API
  function has_allas_auth() {
    return $(".allas_token_expiry").text() !== "";
  }

  // Update the Allas auth token expiry field. Field is used for auth status.
  async function update_expiry() {
    try {
      const expiry = (await api_get({ url: "/status" })).expires;
      $(".allas_token_expiry").text(format_expiry(expiry));
    } catch (err) {
      if (!(err.response && err.response.status === 401)) {
        console.error("Error updating token expiry:", err.message)
      }
    }
  }

  // Do a quick check for access to Allas/LUMI-O and update tab visibility
  async function check_access_quick() {
    const lumio_access = await has_lumi_access();
    const allas_access = await has_allas_access();
    toggle_lumio(lumio_access);
    toggle_allas(allas_access);
  }

  // Updates the current LUMI-O projects list and UI state
  async function update_lumio_projects() {
    try {
      const projects = await api_get({ url: "/projects", json: true, lumio: true, attempt_reauth: true });
      set_projects(projects, "lumio");
      update_lumio_remote_info(projects);
      toggle_lumio(true);
    } catch (err) {
      console.log("Error checking LUMI-O projects:", err)
      toggle_lumio(false);
    }
    update_revoke_buttons();
  }

  async function update_all() {
    // update_remotes queries LUMI-O projects for expiry time
    await Promise.allSettled([check_access_quick().then(update_tabs), update_allas_projects().then(update_tabs), update_remotes(true).then(update_tabs)]);
  }

  async function delete_remote(remote) {
    let data = { "remote": remote };
    try {
      const res = await api_post({ url: "/delete", formData: data });
      remove_remote_links(res.removed || []);
      refresh_remotes();
      addAlert("Success", `Successfully deleted ${remote}. ${backup_file_message(res.backup)}`, "success");
      $("#confirmModal").modal("hide");
      await update_remotes();
    } catch (err) {
      addError("An error occurred when deleting the remote.", err);
      $("#confirmModal").modal("hide");
    }
  }

  async function revoke_remote(remote) {
    const endpoint = $("#remotes_table tbody > tr").filter(function() { return $(this).data("name") === remote; }).first().data("endpoint");
    try {
      let data = { "remote": remote };
      const res = await api_post({ url: "/revoke", formData: data, json: true, lumio: endpoint === "lumio", attempt_reauth: true });
      remove_remote_links(res.removed || []);
      refresh_remotes();
      addAlert("Success", `Successfully revoked the access token for ${remote} and deleted the remote. ${backup_file_message(res.backup)}`, "success");
      $("#confirmModal").modal("hide");
      await update_remotes();
    } catch (err) {
      addError("An error occurred when revoking token and deleting the remote.", err);
      $("#confirmModal").modal("hide");
    }
  }

  function set_remotes(remotes) {
    const existing_remotes = $("#remotes_table tbody > tr");
    remotes.sort((a, b) => a.name.localeCompare(b.name));
    const table_rows = remotes.map((remote) => {
      const existing = existing_remotes.filter(function() { return $(this).data("name") === remote["name"] });
      const tr = document.createElement("tr");
      $(tr)
        .data("name", remote["name"])
        .data("endpoint", remote["endpoint"])
        .data("type", remote["type"]);
      const name_td = document.createElement("td");
      $(name_td).text(remote.name);
      const public_remote = remote.name.match(/lumi-(\d+)-public/);
      if (public_remote) {
        const proj_num = public_remote[1] || "<project_number>";
        const help_icon = document.createElement("i");
        $(help_icon)
          .addClass("fas fa-globe-europe fa-fw")
          .attr("title", `Public remote. Files uploaded to this remote will be publicly accessible by anyone using the URL https://${proj_num}.lumidata.eu/<bucket_name>.`);
        name_td.append(help_icon);
      }
      const type_td = document.createElement("td");
      $(type_td).text(remote.type);
      const expiry_td = document.createElement("td");
      // Attempt to copy expiry value from previous version of table.
      $(expiry_td).addClass("expiry").text(
        remote.expires ?
          format_expiry(remote.expires) :
          (existing.find(".expiry").text() || ""));
      const action_td = document.createElement("td");
      const delete_button = document.createElement("button");
      $(delete_button)
        .addClass("btn btn-primary mr-1 delete-button")
        .text("Delete")
        .on("click",
          () => {
              show_confirm_modal(
                "Are you sure?",
                "Note that this will only delete the remote from the configuration. The access token itself may still be valid and can be used elsewhere.",
                async () => await delete_remote(remote.name)
              )
        });
      action_td.append(delete_button);
      const revoke_button = document.createElement("button");
      $(revoke_button)
        .addClass("btn btn-primary revoke-button")
        .text("Revoke")
        .on("click",
          () => {
            if (remote.type.toLowerCase() === "s3") {
              show_confirm_modal(
              "Are you sure?",
              "The S3 access key for the remote may currently be in use outside of the web interface, for example, when using Rclone or S3cmd command line tools through SSH.",
              async () => await revoke_remote(remote.name)
              )
            } else {
              revoke_remote(remote.name)
            }
          })
          // Copy state of button from previous table if it exists.
        .prop("disabled", existing.length ? existing.find(".revoke-button").prop("disabled") : true);
      action_td.append(revoke_button);
      $(tr).append(name_td, type_td, expiry_td, action_td);
      return tr;
    });
    const table = $("#remotes_table tbody");
    table.empty();
    table.append(...table_rows);
    $("#remotes_table_empty").toggleClass("d-none", remotes.length > 0);
  };

  function update_revoke_buttons() {
    $('#remotes_table tbody > tr').each(function() {
      const endpoint = $(this).data("endpoint");
      const type = $(this).data("type").toLowerCase();
      const expiry = $(this).find(".expiry").text();
      const has_expiry = expiry !== "" && expiry !== "Expired";
      const swift_allas = type === "swift" && ($(this).data("name") || "").startsWith("allas");
      const s3_allas = (endpoint !== "lumio" && type === "s3") && ($(this).data("name") || "").startsWith("s3allas");
      const can_revoke =
        (endpoint === "lumio" && has_expiry) || // LUMI-O
        (
          (has_expiry && swift_allas && has_allas_auth() ) || // Allas Swift
          (s3_allas && has_allas_auth()) // Allas S3 (probably)
        );
      $(this).find(".revoke-button").prop("disabled", !can_revoke);
    });
  }

  // Adds expiry text to LUMI-O remotes
  function update_lumio_remote_info(projects) {
    const rows = $('#remotes_table tbody > tr')
      .filter(function () { return $(this).data("endpoint") === "lumio"; });
    for (const project of projects) {
      const pub = rows.filter(function () { return $(this).data("name") === `lumi-${project.Name}-public` });
      const priv = rows.filter(function () { return $(this).data("name") === `lumi-${project.Name}-private` });
      const expiry_text = project["expires"] ? format_expiry(project.expires) : "Expired";
      pub.find(".expiry").text(expiry_text);
      priv.find(".expiry").text(expiry_text);
    }
  }

  async function update_remotes(update_lumio_expiry = true) {
    try {
      const remotes = await api_get({ url: "/remotes", json: true });
      $("#remotes_table_loading_spinner").hide();
      set_remotes(remotes);
      update_revoke_buttons();
      if (update_lumio_expiry) {
        await update_lumio_projects();
      }
    } catch (err) {
      addError("An error occurred when updating the list of remotes.", err);
      $("#remotes_table_loading_spinner").hide();
    }
    update_revoke_buttons();
  }

  async function add_all(endpoint, public = false) {
    try {
      const res = await api_post({ url: "/add_all", formData: {"remote_type": endpoint === "lumio" ? "lumio" : "swift", "public": public}, json: true, lumio: endpoint === "lumio", attempt_reauth: true });
      await update_remotes(endpoint === "lumio");
      add_remote_links(res.added || []);
      addAlert("Success", `Successfully added ${endpoint === "lumio" ? "LUMI-O" : "Swift"} remotes for all projects. ${backup_file_message(res.backup)}`, "success");
    } catch(err) {
      let added_remotes = "";
      if (err.data && err.data.added && err.data.added.length) {
        added_remotes = `Remote${err.data.added.length > 1 ? 's' : ''} ${err.data.added.join(", ")} ${err.data.added.length > 1 ? 'were' : 'was'} added successfully. ${backup_file_message(err.data.backup)}`;
        add_remote_links(err.data.added);
        update_remotes(endpoint === "lumio");
      }
      addError(`An error occurred when adding remotes for all projects. ${added_remotes}`, err);
    }
    refresh_remotes();
  }

  function show_confirm_modal(title, text, callback, confirmText = "OK", cancelText = "Cancel") {
    const modal_html = `
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">${title}</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <p>${text}</p>
        </div>
        <div class="modal-footer">
          <button type="button" id="confirmButton" class="btn btn-primary">${confirmText}</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">${cancelText}</button>
        </div>
      </div>
    </div>`

    let modal = $('#confirmModal');
    if (!modal.length) {
      $('body').append('<div class="modal" tabindex="-1" role="dialog" id="confirmModal"></div>');
      modal = $('#confirmModal');
    }
    modal.html(modal_html);
    modal.find('#confirmButton').on("click", function () {
      $(this).prop("disabled", true);
      callback().then(() => { $(this).prop("disabled", false) });
    });
    modal.modal("show");
  }

  function backup_file_message(backup_file) {
    if (backup_file) {
      return `Your configuration contained comments, which were not preserved when saving. Your old configuration has been saved to ${backup_file}.`;
    } else {
      return "";
    }
  }

  (async function () {
    localStorage.removeItem("lumio-access-token-refresh");
    $(".btn-add-all").on("click", function (event) {
      event.preventDefault();
      $(this).prop("disabled", true);
      let public = false;
      if ($(this).data("endpoint") === "lumio") {
        const form = $(this).closest("form");
        public = form.find("input[name=public][type=checkbox]").prop("checked");
      }
      add_all($(this).data("endpoint"), public).then(() => { $(this).prop("disabled", false) });
    });
    await update_all();
  })();
  $(".add-remote-form").on("ajax:success", function(event, data) {
    const xhr = event.originalEvent.detail[2];
    const res = JSON.parse(xhr.responseText);
    add_remote_links(res.added);
    refresh_remotes();
    addAlert("Success", `Successfully configured ${res.added.join(", ")} remote${res.added.length > 1 ? "s" : ""}. ${backup_file_message(res.backup)}`, "success");
    update_remotes(true);
  });
  $(".add-remote-form").on("ajax:error", function(event, data) {
    const xhr = event.originalEvent.detail[2];
    const err = parse_api_error(xhr.responseText);
    if (err instanceof AuthorizationError && (event.target && event.target.getAttribute("id") === "add_lumio_remote") && !localStorage.getItem("lumio-access-token-refresh")) {
      (async () => {
        localStorage.setItem("lumio-access-token-refresh", true);
        try {
          await refresh_lumio_access_token();
          $(event.target).find("[type=submit]").click();
        } catch (e) {
          addError("Configuration failed", e);
        }
      }
      )();
      return;
    }
    localStorage.removeItem("lumio-access-token-refresh")
    addError(`Configuration failed.`, err);
  });

  $(".renew-allas-token-form").on("ajax:success", async function(event, data) {
    await update_allas_projects();
  });
  $(".renew-allas-token-form").on("ajax:error", function(event, data) {
    const xhr = event.originalEvent.detail[2];
    const err = parse_api_error(xhr.responseText);
    addError("Authentication failed, please ensure that you typed the password correctly.", err);
  });
</script>
